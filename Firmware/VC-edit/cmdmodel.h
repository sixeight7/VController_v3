#ifndef CMDMODEL_H
#define CMDMODEL_H

#include <QAbstractTableModel>
#include <QList>


struct Cmd_struct
{
    uint8_t Page;   // The page this command belongs to
    uint8_t Switch; // The switch this command belongs to
    uint8_t Type;   // The type of command
    uint8_t Device; // The device for this command (can be device number, CURRENT or COMMON)
    uint8_t Data1;  // Can be the patch/parameter/assign/pc/cc/note or page number
    uint8_t Data2;  // Can be bank number of parameter/cc type
    uint8_t Value1; // Values for parameters, etc.
    uint8_t Value2;
    uint8_t Value3;
    uint8_t Value4;

    bool operator==(const Cmd_struct &other) const // In C++, structs do not have a comparison operator generated by default. You need to write your own
    {
        return Page == other.Page && Switch == other.Switch && Type == other.Type && Device == other.Device && Data1 == other.Device
                && Data2 == other.Data2 && Value1 == other.Value1 && Value2 == other.Value2 && Value3 == other.Value3 && Value4 == other.Value4;
    }
};

inline QDataStream &operator<<(QDataStream &stream, const Cmd_struct &command)
{
    return stream << command.Page << command.Switch << command.Type << command.Device << command.Data1 << command.Data2
                  << command.Value1 << command.Value2 << command.Value3 << command.Value4;
}

inline QDataStream &operator>>(QDataStream &stream, Cmd_struct &command)
{
    return stream >> command.Page >> command.Switch >> command.Type >> command.Device >> command.Data1 >> command.Data2
                  >> command.Value1 >> command.Value2 >> command.Value3 >> command.Value4;
}

class CmdModel : public QAbstractTableModel
{
    Q_OBJECT

public:
    CmdModel(QObject *parent = 0);
    CmdModel(QList<Cmd_struct> commands, QObject *parent = 0);

    int rowCount(const QModelIndex &parent) const override;
    int columnCount(const QModelIndex &parent) const override;
    QVariant data(const QModelIndex &index, int role) const override;
    QVariant headerData(int section, Qt::Orientation orientation, int role) const override;
    Qt::ItemFlags flags(const QModelIndex &index) const override;
    bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole) override;
    bool insertRows(int position, int rows, const QModelIndex &index = QModelIndex()) override;
    bool removeRows(int position, int rows, const QModelIndex &index = QModelIndex()) override;
    QList<Cmd_struct> getCommands() const;

private:
    QList<Cmd_struct> commands;
};

#endif // CMDMODEL_H
